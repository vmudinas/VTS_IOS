name: iOS Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Set up Ruby for CocoaPods
        if: hashFiles('**/Podfile') != ''
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          
      - name: Cache CocoaPods
        if: hashFiles('**/Podfile') != ''
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
            
      - name: Install CocoaPods Dependencies
        if: hashFiles('**/Podfile') != ''
        run: pod install
          
      - name: Cache Build Artifacts
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj/**') }}
          restore-keys: |
            ${{ runner.os }}-xcode-
          
      - name: Build and Test
        run: |
          set -o pipefail
          xcodebuild test \
            -project VTS_IOS.xcodeproj \
            -scheme VTS_IOS \
            -destination "platform=iOS Simulator,name=iPhone 14,OS=latest" \
            -enableCodeCoverage YES \
            | tee build_output.log | xcpretty && exit ${PIPESTATUS[0]}
          echo "Build completed with status $?"
            
      - name: Generate Code Coverage Report
        run: |
          xcresult_path=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" | head -n 1)
          if [ -n "$xcresult_path" ]; then
            xcrun xccov view --report --json "$xcresult_path" > coverage.json
            echo "Generated coverage report from $xcresult_path"
          else
            echo "No .xcresult files found"
            touch coverage.json  # Create empty file so upload doesn't fail
          fi
      
      - name: Prepare Test Results Directory
        run: |
          mkdir -p ./test-results
          echo "Current directory: $(pwd)"
          echo "List of files in current directory:"
          ls -la
          
          # Copy coverage report
          if [ -f coverage.json ]; then
            cp coverage.json ./test-results/
            echo "Coverage report copied successfully"
          else
            echo "No coverage.json file found"
            # Create an empty coverage report
            echo "{}" > ./test-results/coverage.json
            echo "Created empty coverage.json file"
          fi
          
          # Copy build output
          if [ -f build_output.log ]; then
            cp build_output.log ./test-results/
            echo "Build output log copied successfully"
          else
            echo "No build_output.log file found"
            # Create an empty log file
            echo "Build log not available" > ./test-results/build_output.log
            echo "Created empty build_output.log file"
          fi
          
          # Copy xcresult files (if they exist)
          xcresult_path=$(find ~/Library/Developer/Xcode/DerivedData -name "*.xcresult" | head -n 1)
          if [ -n "$xcresult_path" ]; then
            echo "Found xcresult at: $xcresult_path"
            mkdir -p ./test-results/xcresult
            cp -R "$xcresult_path" ./test-results/xcresult/ || echo "Failed to copy xcresult file"
          else
            echo "No .xcresult files found in ~/Library/Developer/Xcode/DerivedData"
            echo "Checking current directory for xcresult files"
            find . -name "*.xcresult" -type d
          fi
          
          # Copy any other log files
          find . -name "*.log" -not -path "./test-results/*" -exec cp {} ./test-results/ \; || echo "No additional log files found"
          
          # List files in the directory to verify
          echo "Files prepared for upload:"
          ls -la ./test-results/
          echo "Content of test-results directory:"
          find ./test-results -type f | xargs ls -la || echo "Failed to list files"
      
      - name: Verify Test Results Directory
        run: |
          if [ ! -d "./test-results" ]; then
            echo "test-results directory does not exist, creating it"
            mkdir -p ./test-results
            echo "Created test-results directory"
          fi
          
          # Ensure there's at least one file in the directory
          if [ -z "$(ls -A ./test-results 2>/dev/null)" ]; then
            echo "test-results directory is empty, creating a summary file"
            echo "Build and test summary" > ./test-results/summary.txt
            echo "Run at: $(date)" >> ./test-results/summary.txt
            echo "Created summary.txt file"
          fi
          
          echo "Files in test-results directory:"
          ls -la ./test-results/
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results
          if-no-files-found: warn